
00. 上周内容回顾
	模块: 文件
		自定义模块
		内置模块 json rondam
		第三方库(拓展的)

01. 模块与包

模块:
	自定义模块

	模块首次引用,加载到内存,如果在引用此模块,直接从内存中读取
	执行文件: 解释器运行到文件
	被引用文件: import,不是主动触发的

	模块引用发生了三件事儿:
		1.他在内存中,开辟了一个以tbjx命名的空间.
		2.你模块中的所有内容都加载到了内存.
		3.你要通过tbjx.的方式去引用模块中的对象.

	为模块起别名:
		1.将模块名叫较长的改成短的,便于操作, 主要用途
		2.可以拓展代码

	导入多个模块
		需要满足pep8规范

	from... import...
		优点: 方便使用,节省内存
		缺点: 可能会与当前执行文件产生冲突

		改名

	from... import *
		不建议全部引用*
		但是可以在一定条件下使用
			在模块中添加__all__ = ['read1', 'read2']

	py文件的功能:
		1.可以被当成模块使用(可以被调用)
		2.可以执行本文件的功能()

		当成执行文件: __main__
		当成模块被引用: 模块名

			__name__ 在本文件调试

	模块的引用顺序:
		1.先从内存中找
		2.然后内置模块(os,time...)
		3.最后sys.path()
			import sys
			print(sys.path)
				先是当前路径,
			print(sys.modules)
				python解释器运行时,自动加载到内存的一些模块

		找到m1文件的方式:
			1.将m1路径主动添加到sys.path
				用apped添加
			2.用from... import..

包:
	import 包块发生了三件事
	1.在内存中开辟了一个名称空间aaa
	2.自动将包下面的__init__文件中对象加载到内存
	3.通过aaa.获取模块中到对象

	模块到分发

	相对导入:
	绝对导入



02. 程序开发规范(规范化目录)
	配置文件
	公共组件
	核心逻辑
	启动文件
	DB文件




03. re模块
	爬虫
	正则表达式

	按照你的一定规则去操作字符串,得到你想要的结果




04. loggin模块

05. haslib模块

06. time 模块
	时间戳 timestamp
	格式化时间
	结构化时间

07. os sys conllections 等等
