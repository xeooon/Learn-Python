01 上周内容回顾
    闭包:
        1.必须嵌套在函数在函数中
        2.内层函数对外层函数的变量的应用(引用,修改)非全局变量
        3.闭包必须作为返回值,逐层返回,直至最外层函数的返回值

    标配版装饰器:
        def wrapper(f):
            def inner(*args, **kwargs):
                ret = f(*.args, **kwargs)
            return ret
        return inner

        @wrapper  # func = wrapper(func)
        def func():
            pass
        func()  # inner

        装饰器好处:
            1.在不改变原函数的执行方式和内部代码的前提下,给函数增加额外的功能. 登录, 打印日志..

    高配版装饰器:
    def w()
             def wrapper(f):
                def inner(*args, **kwargs):
                    ret = f(*.args, **kwargs)
                return ret
            return inner
        return w

        @w
        def func():
            pass
        func()  # inner


    # 多个装饰器装饰一个函数


    如何学习python:
        学英语:
            听 55%
            说 5%
            读 20%
            写 20%

        输入input  : 听 + 读 = 75%
        输出output : 说 + 写 = 25%

        母系英语:
            孩子: 听 + 说 + 纠正


    学python:
        输入: 8个小时
        输出: 10个小时
        纠正: 作业答疑


02 内置函数 10个

03 递归函数(了解)



04 面向对象初识

05 类名, 对象, 调用属性方法

06 类名称空间, 对象空间, 对象查询顺序

07 组合(很重要)

08 面向对象三大特性:(非常重要)
    继承, 封装, 多态

09 接口类, 抽象类, 鸭子类型


编程分类:
1.函数式编程 + 面向对象编程
2.纯面向对象编程
